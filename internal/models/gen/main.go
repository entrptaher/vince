package main

import (
	"bufio"
	"bytes"
	_ "embed"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
)

//go:embed fields.txt
var fields []byte

func main() {
	var all []string
	s := bufio.NewScanner(bytes.NewReader(fields))
	for s.Scan() {
		all = append(all, strings.TrimSpace(s.Text()))
	}
	b := new(bytes.Buffer)

	fmt.Fprintln(b, "// Code generated by ingernal/gen/main.go. DO NOT EDIT.")
	fmt.Fprintln(b, "package models")
	fmt.Fprintln(b, "type Field byte")
	fmt.Fprintln(b, "const(")
	fmt.Fprintf(b, "Field_%s Field=iota\n", all[0])
	for _, f := range all[1:] {
		fmt.Fprintf(b, "Field_%s\n", f)
	}
	fmt.Fprintln(b, ")")
	fmt.Fprintln(b, "var(")
	fmt.Fprintln(b, "Field_name = map[Field]string{")
	for _, f := range all {
		fmt.Fprintf(b, "Field_%s:%q,\n", f, f)
	}
	fmt.Fprintln(b, "}")
	fmt.Fprintln(b, "Field_value = map[string]Field{")
	for _, f := range all {
		fmt.Fprintf(b, "%q:Field_%s,\n", f, f)
	}
	fmt.Fprintln(b, "}")
	fmt.Fprintln(b, ")")
	fmt.Fprintln(b, "func (f Field) String() string { return Field_name[f] }")
	data, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	os.WriteFile("fields.gen.go", data, 0600)
}
