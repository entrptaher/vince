package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"log/slog"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"gopkg.in/yaml.v2"
)

func main() {
	flag.Parse()
	root := flag.Arg(0)
	makeBot(root)
}

func makeBot(root string) {
	type Producer struct {
		Name string `yaml:"name" json:"name"`
		Url  string `yaml:"url" json:"url"`
	}

	type Bot struct {
		Regex    string   `yaml:"regex" json:"regex"`
		Name     string   `yaml:"name" json:"name"`
		Category string   `yaml:"category" json:"category"`
		Url      string   `yaml:"url" json:"url"`
		Producer Producer `yaml:"producer" json:"producer"`
	}

	var r []*Bot
	readUA(root, "bots.yml", &r)

	var s bytes.Buffer

	var buf bytes.Buffer
	fmt.Fprintln(&buf, "// DO NOT EDIT Code generated by ua/bot/make_bot.go")
	fmt.Fprintln(&buf, " package ua2")
	for i, x := range r {
		if i != 0 {
			s.WriteByte('|')
		}
		s.WriteString(x.Regex)
	}

	if IsStdRe(s.String()) {
		fmt.Fprintf(&buf, " var allBotsReStandardMatch= MustCompile(`%s`)\n", Clean(s.String()))
	} else {
		fmt.Fprintf(&buf, " var allBotsReStandardMatch= MustCompile2(`%s`)\n", Clean(s.String()))
	}
	fmt.Fprintln(&buf, "var botsReList=[]*botRe{")
	for _, m := range r {
		s.Reset()
		if IsStdRe(m.Regex) {
			fmt.Fprintf(&s, "re:MatchRe(`%s`)", Clean(m.Regex))
		} else {
			fmt.Fprintf(&s, "re:MatchRe2(`%s`)", Clean(m.Regex))
		}
		fmt.Fprintf(&buf, "{%s, name:%q,category:%q,url:%q,producerName:%q,producerURL:%q, },\n",
			&s, m.Name, m.Category, m.Url, m.Producer.Name, m.Producer.Url,
		)
	}
	fmt.Fprintln(&buf, "}")
	f, err := format.Source(buf.Bytes())
	if err != nil {
		fail("failed to format go source ", err.Error())
	}
	os.WriteFile("ua_bots.go", f, 0600)
}

func readUA(root, name string, out any) {
	path := filepath.Join(root, name)
	f, err := os.ReadFile(path)
	if err != nil {
		fail("failed to read ua file ", path)
	}
	err = yaml.Unmarshal(f, out)
	if err != nil {
		fail("failed to  decode ", path, err.Error())
	}
}

func fail(msg string, args ...any) {
	slog.Error(msg, args...)
	os.Exit(1)
}

const meta = "\\.+*?()|[]{}^$#"

func IsRe(s string) bool {
	return strings.ContainsAny(s, meta)
}

func Clean(re string) string {
	rg := strings.Replace(re, `/`, `\/`, -1)
	rg = strings.Replace(rg, `++`, `+`, -1)
	rg = strings.Replace(rg, `\_`, `_`, -1)
	// if we find `\_` again, the original was `\\_`,
	// so restore that so the regex engine does not attempt to escape `_`
	rg = strings.Replace(rg, `\_`, `\\_`, -1)

	// only match if useragent begins with given regex or there is no letter before it
	return `(?:^|[^A-Z0-9-_]|[^A-Z0-9-]_|sprd-)(?:` + rg + ")"
}

func IsStdRe(s string) bool {
	r := Clean(s)
	_, err := regexp.Compile(r)
	return err == nil
}
